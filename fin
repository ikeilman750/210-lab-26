#include <iostream>
#include <fstream>
#include <chrono>
#include <vector>
#include <algorithm>
#include <set>
#include <list>
#include <iomanip>
using namespace std;

// const int SZ = 20000, COLS = 3, ROWS = 4, TESTS = 4;
const int STRUCTURES = 3;
const int ROWS = 4, COLS = 3, SIMULATIONS = 15;
const int W1 = 10;

int main() {
    int results[SIMULATIONS][ROWS][COLS] = {};
    string cd;

    // testing for READ operations
    for (int sim = 0; sim < SIMULATIONS; ++sim) {
        vector<string> data_vector;
        list<string> data_list;
        set<string> data_set;

        for (int i = 0; i < STRUCTURES; i++) {
            ifstream fin("codes.txt");
            auto start = chrono::high_resolution_clock::now();
            switch(i) {
                case 0: { // read into a vector
                    while (fin >> cd) data_vector.push_back(cd);
                    break;
                }
                case 1: { // read into a list
                    while (fin >> cd) data_list.push_back(cd);
                    break;
                }
                case 2: { // read into a set
                    while (fin >> cd) data_set.insert(cd);
                    break;
                }
            }
            auto end = chrono::high_resolution_clock::now();
            auto duration = chrono::duration_cast<chrono::microseconds>(end - start);
            results[sim][0][i] = duration.count();
            fin.close();
        }

        // testing for SORT operations
        for (int i = 0; i < STRUCTURES; i++) {
            auto start = chrono::high_resolution_clock::now();
            if (i == 0) sort(data_vector.begin(), data_vector.end());
            else if (i == 1) data_list.sort();
            else results[sim][1][i] = -1;
            if (i < 2) {
                auto end = chrono::high_resolution_clock::now();
                auto duration = chrono::duration_cast<chrono::microseconds>(end - start);
                results[sim][1][i] = duration.count();
            }
        }

        // testing for INSERT operations
        for (int i = 0; i < STRUCTURES; i++) {
            int ind_v = data_vector.size() / 2;
            int ind_l = data_list.size() / 2;
            auto start = chrono::high_resolution_clock::now();
            if (i == 0) data_vector.insert(data_vector.begin() + ind_v, "TESTCODE");
            else if (i == 1) {
                auto it = data_list.begin();
                advance(it, ind_l);
                data_list.insert(it, "TESTCODE");
            } else data_set.insert("TESTCODE");
            auto end = chrono::high_resolution_clock::now();
            auto duration = chrono::duration_cast<chrono::microseconds>(end - start);
            results[sim][2][i] = duration.count();
        }

           // testing for DELETE operations
        for (int i = 0; i < STRUCTURES; i++) {
            int ind = data_vector.size() / 2;
            string target_v = data_vector[ind];
            auto it1 = data_list.begin();
            advance(it1, ind);
            string target_l = *it1;
            auto it2 = data_set.begin();
            advance(it2, ind);
            string target_s = *it2;
            
            auto start = chrono::high_resolution_clock::now();
            if (i == 0) data_vector.erase(remove(data_vector.begin(), data_vector.end(), target_v), data_vector.end());
            else if (i == 1) data_list.remove(target_l);
            else data_set.erase(target_s);
            auto end = chrono::high_resolution_clock::now();
            auto duration = chrono::duration_cast<chrono::microseconds>(end - start);
            results[sim][3][i] = duration.count();
        }
    }

    int avg_results[ROWS][COLS] = {};
    for (int row = 0; row < ROWS; ++row) {
        for (int col = 0; col < COLS; ++col) {
            for (int sim = 0; sim < SIMULATIONS; ++sim) {
                avg_results[row][col] += results[sim][row][col];
            }
            avg_results[row][col] /= SIMULATIONS;
        }
    }

    string labels[] = {"Read", "Sort", "Insert", "Delete"};
    cout << "Number of simulations: " << SIMULATIONS << endl;
    cout << setw(W1) << "Operation" << setw(W1) << "Vector" << setw(W1) << "List" << setw(W1) << "Set" << endl;
    for (int i = 0; i < ROWS; i++) {
        cout << setw(W1) << labels[i];
        for (int j = 0; j < COLS; j++) 
            cout << setw(W1) << avg_results[i][j];
        cout << endl;
    }

    return 0;
}
